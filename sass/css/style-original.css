@charset "UTF-8";
/*
siempre tenemos que llamar primero a los partials que esten en utilities
*/
/*

variable = algo que puede variar.
variable = espacio de memoria reservado para 
almacenar un tipo de dato, el tipo de dato
puede variar.  


:root => esto sirve solamente para css. 
:root{
    --color-primario: red;
}

*/
/*las variables van a funcionar en cualquier lugar
donde se las aplique como valor*/
/*
cuando tenemos colecciones de valores que son iguales.
podemos utilizar maps, 
*/
/*
las funciones nos permiten a nosotros generar bloques de codigo
que cumplen una determina orden.

los mixins funcionan igual, los mixins poseen propiedades
que trabajan en conjunto para cumplir una determina orden

estaticos o dinamicos, 1ยบ el cumple una funcion dada por 
el programador. Si es dinamico, el mixin va modificandose,
dependiendo los valores que aplique el programador.

*/
/*
se llama a todo lo que  corresponde en base
*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; }

/*
llamamos a todo lo que este en layout
*/
header {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 2.5rem;
  padding: 20px 30px;
  background-color: black; }
  header div img {
    width: 4rem; }

/*

function saludo(nombre, apellido){


}


saludo(pedro, suarez)

*/
.main-index {
  background-color: grey;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
  gap: none;
  grid-template-areas: "item1 item1 item1" "item2 item2 item2" "item3 item3 item3" "item4 item4 item4"; }
  .main-index .section-principal h1 {
    text-align: center;
    color: #ffd900;
    font-size: 2rem; }

.ejemplo1, .ejemplo2, .ejemplo3 {
  background-color: blue;
  font-size: 1.875rem;
  font-weight: 100;
  text-align: center;
  color: rgba(42, 249, 204, 0.586);
  box-shadow: 2px 2px 2px black; }

.ejemplo2, .ejemplo3 {
  color: black; }

.ejemplo3 {
  text-align: right; }

footer {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
  gap: 1.25rem; }
  footer h2 {
    grid-column: 1/3;
    grid-row: 1/2;
    background-color: papayawhip; }
  footer p {
    grid-column: 3 /4;
    grid-row: 1 /3;
    background-color: blue; }
  footer button {
    grid-column: 1/3;
    grid-row: 2/3;
    justify-self: center; }

/*
llamamos a todos los componentes
*/
.navbar {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  align-items: center;
  gap: 1.25rem; }
  .navbar li {
    list-style: none; }
    .navbar li a {
      text-decoration: none;
      color: #00d0ff;
      font-size: 1.5625rem; }

/*
siempre al final los mediaquery

si el sitio se piensa desde mobile first el orden es creciente, vamos de lo chico a lo grande

@media (tablet)
@media(desktop)


si el sitio se piensa desde responsive web design el orden es decreciente, vamos de lo grande a lo chico.

@media(tablet)
@media(mobile)

*/
